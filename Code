% resonance.m
% Numerically integrate second-order ODE: Damped, driven harmonic oscillator

function Forced

omega = 135;      % natural frequency = sqrt(k/m)

%A = 0.8;        % driving amplitude per unit mass
omega0 = 140;   % driving frequency
zeta=0.1;
d=0.01;
g=9.8;
l=0.45;

tBegin = 0;     % time begin
tEnd = 160;      % time end

x0 = 9;       % initial position
v0 = 0.0;       % initial velocitie



% Use Runge-Kutta 45 integrator to solve the ODE
[t,w] = ode45(@derivatives, [tBegin tEnd], [x0 v0]);
x = w(:,1);     % extract positions from first column of w matrix
v = w(:,2);     % extract velocities from second column of w matrix

plot(t,x);

title('Damped, Driven Harmonic Oscillator');
ylabel('position (m)');
xlabel('time (s)');
sols = ode45(@derivatives, [tBegin tEnd], [x0 v0]);
x_pos = @(t) sin(deval(sols,t,1));
y_pos = @(t) -cos(deval(sols,t,1));

figure;

plot(x,v);
title('Phase plot');
ylabel('position ');
xlabel('VEL');
%figure;
%plot(sols.y(1,:), sols.y(2,:));
%title('Phase plot sols');
%ylabel('position ');
%xlabel('VEL');
figure;
fanimator(@(t) plot(x_pos(t),y_pos(t),'ko','MarkerFaceColor','k'));
hold on;
fanimator(@(t) plot([0 x_pos(t)],[0 y_pos(t)],'k-'));
fanimator(@(t) text(-0.3,1.5,"Timer: "+num2str(t,4)+" s"));
playAnimation


    % Function defining derivatives dx/dt and dv/dt
    % uses the parameters a, b, A, omega0 in main program but changeth them not
    function derivs = derivatives(tf,wf)
        xf = wf(1);            % wf(1) stores theta
        vf = wf(2);            % wf(2) stores angular
        dxdt = vf;                                     % set dx/dt = velocity
        dvdt = -((d/l)*omega*omega*cos(omega*tf) -(g/l))*sin(xf) -1.2*(vf-0) ;  % set dv/dt = accelerationzz
        derivs = [dxdt; dvdt];  % return the derivatives
    end

end
